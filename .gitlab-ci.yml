stages:
  - report
  - process
  - commit
  - test
  - email

# create and commit all reports only on daily schedule
grid:
  stage: report
  image: gitlab-registry.cern.ch/vaustrup/rucio-clients:main
  before_script:
    - mkdir -p ${HOME}/.globus
    - base64 -d $USERCERT > ${HOME}/.globus/usercert.pem
    - base64 -d $USERKEY > ${HOME}/.globus/userkey.pem
    - mkdir -p ${HOME}/.voms
    - echo '"atlas" "voms-atlas-auth.cern.ch" "443" "/DC=ch/DC=cern/OU=computers/CN=atlas-auth.cern.ch" "atlas" "24"' > .voms/vomses
    - chmod 600 ${HOME}/.globus/userkey.pem
    - export X509_USER_PROXY=X509_USER_PROXY
    - echo $PASSWORD | voms-proxy-init -voms atlas --out $CI_PROJECT_DIR/$X509_USER_PROXY
    - export RUCIO_ACCOUNT=vaustrup
  script:
    - python3 gridspace.py --rse $DISK
  parallel:
    matrix:
      - DISK: [CERN-PROD_PHYS-EXOTICS, TOKYO-LCG2_PHYS-EXOTICS]
  artifacts:
    paths:
      - ./reports/$DISK.csv
    expire_in: 24h
  retry: 1 # sometimes there are issues e.g. when pulling docker image
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_TIMING == "daily"
  allow_failure: True

grid_test:
  extends: grid
  stage: test
  parallel:
    matrix:
      - DISK: [TOKYO-LCG2_PHYS-EXOTICS]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

eos:
  stage: report
  tags:
    - eos
  before_script:
    - yum install -y python3-pip
    - pip3 install python-gitlab
    - echo "${PASSWORD}" | kinit $USERNAME
  script:
    - python3 eos.py -s $SUBGROUP --report-in-gitlab
  parallel:
    matrix:
      - SUBGROUP: [ccs, cdm, hqt, jdm, jmx, lpx, lup, ueh]
  artifacts:
    paths:
      - ./reports/$SUBGROUP.csv
    expire_in: 24h
  retry: 1 # sometimes there are issues e.g. when pulling docker image
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_TIMING == "daily"

eos_test:
  extends: eos
  stage: test
  parallel:
    matrix:
      - SUBGROUP: [cdm]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

csv_to_twiki_grid:
  stage: process
  image: registry.cern.ch/docker.io/library/python:3.12.0b2-slim-buster
  script:
    - python3 helpers/csv_to_twiki.py --file reports/$DISK.csv --delimiter , --highlight-header
  parallel:
    matrix:
      - DISK: [CERN-PROD_PHYS-EXOTICS, TOKYO-LCG2_PHYS-EXOTICS]
  artifacts:
    paths:
      - ./reports/$DISK.table
    expire_in: 24h
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_TIMING == "daily"

csv_to_twiki_subgroup:
  stage: process
  image: registry.cern.ch/docker.io/library/python:3.12.0b2-slim-buster
  script:
    - python3 helpers/csv_to_twiki.py --file reports/$SUBGROUP.csv --delimiter , --highlight-header
  parallel:
    matrix:
      - SUBGROUP: [ccs, cdm, hqt, jdm, jmx, lpx, lup, ueh]
  artifacts:
    paths:
      - ./reports/$SUBGROUP.table
    expire_in: 24h
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_TIMING == "daily"

csv_to_twiki_lookup:
  stage: process
  image: registry.cern.ch/docker.io/library/python:3.12.0b2-slim-buster
  script:
    - python3 helpers/csv_to_twiki.py --file lookup_table.csv
  artifacts:
    paths:
      - ./reports/lookup_table.table
    expire_in: 24h
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_TIMING == "daily"

plot:
  stage: process
  image: registry.cern.ch/docker.io/library/python:3.12.0b2-slim-buster
  before_script:
    - apt update
    - apt install -y git
    - pip3 install --upgrade pip
    - pip3 install matplotlib
  script:
    - python3 plots.py
  artifacts:
    paths:
      - ./reports/*.pdf
    expire_in: 24h
  retry: 1 # sometimes there are issues e.g. when pulling docker image
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_TIMING == "daily"
  allow_failure: True

commit:
  stage: commit
  script:
    - git config user.email "exotics.diskspace.watcher@cern.ch"
    - git config user.name "ExoticsDiskspaceWatcher"
    - git remote add gitlab_origin https://oauth2:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
    - git add reports/*.csv
    - git add reports/*.table
    # - git add reports/*.pdf
    # commit and push only if changes present
    # https://stackoverflow.com/questions/22040113/how-to-let-jenkins-git-commit-only-if-there-are-changes
    - git diff --staged --quiet || (git commit -m "update subgroup data (`date +'%Y-%m-%d'`)" && git push -o ci.skip gitlab_origin HEAD:main)
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_TIMING == "daily"

email:
  stage: email
  image: registry.cern.ch/docker.io/library/python:3.12.0b2-slim-buster
  before_script:
    - apt update
    - apt install -y git
    - apt install -y texlive-latex-base texlive-latex-extra
  script:
    - python3 send_weekly_report.py
  artifacts:
    paths:
      - latex.pdf
    expire_in: 28d
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_TIMING == "weekly"